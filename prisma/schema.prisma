// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar()
  email     String   @unique @db.VarChar()
  password  String   @db.VarChar()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Customer {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar()
  email        String        @unique @db.VarChar()
  blockedAt    DateTime?     @map("blocked_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]

  @@map("customers")
}

model Table {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar()
  qty          Int
  isActive     Boolean
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]

  @@map("tables")
}

model Reservation {
  id             Int      @id @default(autoincrement())
  startedAt      DateTime @map("started_at")
  finishedAt     DateTime @map("finished_at")
  cancelledNotes String?  @map("cancelled_notes") @db.VarChar()
  customerNotes  String?  @map("customer_notes") @db.VarChar()
  status         String   @db.VarChar() // confirmed, completed, cancelled, not-attend
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     Int      @map("customer_id")
  table          Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId        Int      @map("table_id")

  @@map("reservations")
}

model Config {
  id        Int        @id @default(autoincrement())
  daysOff   DateTime[]
  openedAt  String     @map("opened_at")
  closedAt  String     @map("closed_at")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("configs")
}
